// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CodeBattle {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Msg {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Client_Frame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Client_Frame, global::CodeBattle.Client_Frame.Builder> internal__static_CodeBattle_Client_Frame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Server_Frame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Server_Frame, global::CodeBattle.Server_Frame.Builder> internal__static_CodeBattle_Server_Frame__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Msg() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SCkNvZGVCYXR0bGUiLQoMQ2xpZW50X0ZyYW1lEgoKAmlw", 
            "GAEgAigJEhEKCWRpcmVjdGlvbhgCIAIoBSKJAQoMU2VydmVyX0ZyYW1lEg0K", 
            "BWVtcHR5GAEgAigIEhAKCGZyYW1lc2VxGAIgAigFEioKCHByZWZyYW1lGAMg", 
            "AigLMhguQ29kZUJhdHRsZS5DbGllbnRfRnJhbWUSLAoKbGF0ZXJmcmFtZRgE", 
          "IAIoCzIYLkNvZGVCYXR0bGUuQ2xpZW50X0ZyYW1l"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_CodeBattle_Client_Frame__Descriptor = Descriptor.MessageTypes[0];
        internal__static_CodeBattle_Client_Frame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Client_Frame, global::CodeBattle.Client_Frame.Builder>(internal__static_CodeBattle_Client_Frame__Descriptor,
                new string[] { "Ip", "Direction", });
        internal__static_CodeBattle_Server_Frame__Descriptor = Descriptor.MessageTypes[1];
        internal__static_CodeBattle_Server_Frame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Server_Frame, global::CodeBattle.Server_Frame.Builder>(internal__static_CodeBattle_Server_Frame__Descriptor,
                new string[] { "Empty", "Frameseq", "Preframe", "Laterframe", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Client_Frame : pb::GeneratedMessage<Client_Frame, Client_Frame.Builder> {
    private Client_Frame() { }
    private static readonly Client_Frame defaultInstance = new Client_Frame().MakeReadOnly();
    private static readonly string[] _clientFrameFieldNames = new string[] { "direction", "ip" };
    private static readonly uint[] _clientFrameFieldTags = new uint[] { 16, 10 };
    public static Client_Frame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Client_Frame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Client_Frame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Msg.internal__static_CodeBattle_Client_Frame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Client_Frame, Client_Frame.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Msg.internal__static_CodeBattle_Client_Frame__FieldAccessorTable; }
    }
    
    public const int IpFieldNumber = 1;
    private bool hasIp;
    private string ip_ = "";
    public bool HasIp {
      get { return hasIp; }
    }
    public string Ip {
      get { return ip_; }
    }
    
    public const int DirectionFieldNumber = 2;
    private bool hasDirection;
    private int direction_;
    public bool HasDirection {
      get { return hasDirection; }
    }
    public int Direction {
      get { return direction_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIp) return false;
        if (!hasDirection) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _clientFrameFieldNames;
      if (hasIp) {
        output.WriteString(1, field_names[1], Ip);
      }
      if (hasDirection) {
        output.WriteInt32(2, field_names[0], Direction);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Ip);
      }
      if (hasDirection) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Direction);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Client_Frame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Client_Frame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Client_Frame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Client_Frame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Client_Frame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Client_Frame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Client_Frame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Client_Frame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Client_Frame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Client_Frame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Client_Frame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Client_Frame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Client_Frame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Client_Frame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Client_Frame result;
      
      private Client_Frame PrepareBuilder() {
        if (resultIsReadOnly) {
          Client_Frame original = result;
          result = new Client_Frame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Client_Frame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Client_Frame.Descriptor; }
      }
      
      public override Client_Frame DefaultInstanceForType {
        get { return global::CodeBattle.Client_Frame.DefaultInstance; }
      }
      
      public override Client_Frame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Client_Frame) {
          return MergeFrom((Client_Frame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Client_Frame other) {
        if (other == global::CodeBattle.Client_Frame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIp) {
          Ip = other.Ip;
        }
        if (other.HasDirection) {
          Direction = other.Direction;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientFrameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientFrameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIp = input.ReadString(ref result.ip_);
              break;
            }
            case 16: {
              result.hasDirection = input.ReadInt32(ref result.direction_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIp {
        get { return result.hasIp; }
      }
      public string Ip {
        get { return result.Ip; }
        set { SetIp(value); }
      }
      public Builder SetIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIp = true;
        result.ip_ = value;
        return this;
      }
      public Builder ClearIp() {
        PrepareBuilder();
        result.hasIp = false;
        result.ip_ = "";
        return this;
      }
      
      public bool HasDirection {
        get { return result.hasDirection; }
      }
      public int Direction {
        get { return result.Direction; }
        set { SetDirection(value); }
      }
      public Builder SetDirection(int value) {
        PrepareBuilder();
        result.hasDirection = true;
        result.direction_ = value;
        return this;
      }
      public Builder ClearDirection() {
        PrepareBuilder();
        result.hasDirection = false;
        result.direction_ = 0;
        return this;
      }
    }
    static Client_Frame() {
      object.ReferenceEquals(global::CodeBattle.Msg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Server_Frame : pb::GeneratedMessage<Server_Frame, Server_Frame.Builder> {
    private Server_Frame() { }
    private static readonly Server_Frame defaultInstance = new Server_Frame().MakeReadOnly();
    private static readonly string[] _serverFrameFieldNames = new string[] { "empty", "frameseq", "laterframe", "preframe" };
    private static readonly uint[] _serverFrameFieldTags = new uint[] { 8, 16, 34, 26 };
    public static Server_Frame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Server_Frame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Server_Frame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Msg.internal__static_CodeBattle_Server_Frame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Server_Frame, Server_Frame.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Msg.internal__static_CodeBattle_Server_Frame__FieldAccessorTable; }
    }
    
    public const int EmptyFieldNumber = 1;
    private bool hasEmpty;
    private bool empty_;
    public bool HasEmpty {
      get { return hasEmpty; }
    }
    public bool Empty {
      get { return empty_; }
    }
    
    public const int FrameseqFieldNumber = 2;
    private bool hasFrameseq;
    private int frameseq_;
    public bool HasFrameseq {
      get { return hasFrameseq; }
    }
    public int Frameseq {
      get { return frameseq_; }
    }
    
    public const int PreframeFieldNumber = 3;
    private bool hasPreframe;
    private global::CodeBattle.Client_Frame preframe_;
    public bool HasPreframe {
      get { return hasPreframe; }
    }
    public global::CodeBattle.Client_Frame Preframe {
      get { return preframe_ ?? global::CodeBattle.Client_Frame.DefaultInstance; }
    }
    
    public const int LaterframeFieldNumber = 4;
    private bool hasLaterframe;
    private global::CodeBattle.Client_Frame laterframe_;
    public bool HasLaterframe {
      get { return hasLaterframe; }
    }
    public global::CodeBattle.Client_Frame Laterframe {
      get { return laterframe_ ?? global::CodeBattle.Client_Frame.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEmpty) return false;
        if (!hasFrameseq) return false;
        if (!hasPreframe) return false;
        if (!hasLaterframe) return false;
        if (!Preframe.IsInitialized) return false;
        if (!Laterframe.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serverFrameFieldNames;
      if (hasEmpty) {
        output.WriteBool(1, field_names[0], Empty);
      }
      if (hasFrameseq) {
        output.WriteInt32(2, field_names[1], Frameseq);
      }
      if (hasPreframe) {
        output.WriteMessage(3, field_names[3], Preframe);
      }
      if (hasLaterframe) {
        output.WriteMessage(4, field_names[2], Laterframe);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEmpty) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Empty);
      }
      if (hasFrameseq) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Frameseq);
      }
      if (hasPreframe) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Preframe);
      }
      if (hasLaterframe) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Laterframe);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Server_Frame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Server_Frame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Server_Frame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Server_Frame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Server_Frame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Server_Frame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Server_Frame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Server_Frame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Server_Frame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Server_Frame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Server_Frame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Server_Frame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Server_Frame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Server_Frame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Server_Frame result;
      
      private Server_Frame PrepareBuilder() {
        if (resultIsReadOnly) {
          Server_Frame original = result;
          result = new Server_Frame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Server_Frame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Server_Frame.Descriptor; }
      }
      
      public override Server_Frame DefaultInstanceForType {
        get { return global::CodeBattle.Server_Frame.DefaultInstance; }
      }
      
      public override Server_Frame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Server_Frame) {
          return MergeFrom((Server_Frame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Server_Frame other) {
        if (other == global::CodeBattle.Server_Frame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEmpty) {
          Empty = other.Empty;
        }
        if (other.HasFrameseq) {
          Frameseq = other.Frameseq;
        }
        if (other.HasPreframe) {
          MergePreframe(other.Preframe);
        }
        if (other.HasLaterframe) {
          MergeLaterframe(other.Laterframe);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverFrameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverFrameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEmpty = input.ReadBool(ref result.empty_);
              break;
            }
            case 16: {
              result.hasFrameseq = input.ReadInt32(ref result.frameseq_);
              break;
            }
            case 26: {
              global::CodeBattle.Client_Frame.Builder subBuilder = global::CodeBattle.Client_Frame.CreateBuilder();
              if (result.hasPreframe) {
                subBuilder.MergeFrom(Preframe);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Preframe = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::CodeBattle.Client_Frame.Builder subBuilder = global::CodeBattle.Client_Frame.CreateBuilder();
              if (result.hasLaterframe) {
                subBuilder.MergeFrom(Laterframe);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Laterframe = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEmpty {
        get { return result.hasEmpty; }
      }
      public bool Empty {
        get { return result.Empty; }
        set { SetEmpty(value); }
      }
      public Builder SetEmpty(bool value) {
        PrepareBuilder();
        result.hasEmpty = true;
        result.empty_ = value;
        return this;
      }
      public Builder ClearEmpty() {
        PrepareBuilder();
        result.hasEmpty = false;
        result.empty_ = false;
        return this;
      }
      
      public bool HasFrameseq {
        get { return result.hasFrameseq; }
      }
      public int Frameseq {
        get { return result.Frameseq; }
        set { SetFrameseq(value); }
      }
      public Builder SetFrameseq(int value) {
        PrepareBuilder();
        result.hasFrameseq = true;
        result.frameseq_ = value;
        return this;
      }
      public Builder ClearFrameseq() {
        PrepareBuilder();
        result.hasFrameseq = false;
        result.frameseq_ = 0;
        return this;
      }
      
      public bool HasPreframe {
       get { return result.hasPreframe; }
      }
      public global::CodeBattle.Client_Frame Preframe {
        get { return result.Preframe; }
        set { SetPreframe(value); }
      }
      public Builder SetPreframe(global::CodeBattle.Client_Frame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPreframe = true;
        result.preframe_ = value;
        return this;
      }
      public Builder SetPreframe(global::CodeBattle.Client_Frame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPreframe = true;
        result.preframe_ = builderForValue.Build();
        return this;
      }
      public Builder MergePreframe(global::CodeBattle.Client_Frame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPreframe &&
            result.preframe_ != global::CodeBattle.Client_Frame.DefaultInstance) {
            result.preframe_ = global::CodeBattle.Client_Frame.CreateBuilder(result.preframe_).MergeFrom(value).BuildPartial();
        } else {
          result.preframe_ = value;
        }
        result.hasPreframe = true;
        return this;
      }
      public Builder ClearPreframe() {
        PrepareBuilder();
        result.hasPreframe = false;
        result.preframe_ = null;
        return this;
      }
      
      public bool HasLaterframe {
       get { return result.hasLaterframe; }
      }
      public global::CodeBattle.Client_Frame Laterframe {
        get { return result.Laterframe; }
        set { SetLaterframe(value); }
      }
      public Builder SetLaterframe(global::CodeBattle.Client_Frame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLaterframe = true;
        result.laterframe_ = value;
        return this;
      }
      public Builder SetLaterframe(global::CodeBattle.Client_Frame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLaterframe = true;
        result.laterframe_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLaterframe(global::CodeBattle.Client_Frame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLaterframe &&
            result.laterframe_ != global::CodeBattle.Client_Frame.DefaultInstance) {
            result.laterframe_ = global::CodeBattle.Client_Frame.CreateBuilder(result.laterframe_).MergeFrom(value).BuildPartial();
        } else {
          result.laterframe_ = value;
        }
        result.hasLaterframe = true;
        return this;
      }
      public Builder ClearLaterframe() {
        PrepareBuilder();
        result.hasLaterframe = false;
        result.laterframe_ = null;
        return this;
      }
    }
    static Server_Frame() {
      object.ReferenceEquals(global::CodeBattle.Msg.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
