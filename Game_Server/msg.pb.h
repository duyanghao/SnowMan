// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CodeBattle {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_msg_2eproto();
void protobuf_InitDefaults_msg_2eproto();
void protobuf_AssignDesc_msg_2eproto();
void protobuf_ShutdownFile_msg_2eproto();

class Client_Frame;
class Login_Frame;
class Login_Response;
class Server_Frame;
class Userinfo_Frame;

// ===================================================================

class Client_Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CodeBattle.Client_Frame) */ {
 public:
  Client_Frame();
  virtual ~Client_Frame();

  Client_Frame(const Client_Frame& from);

  inline Client_Frame& operator=(const Client_Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Client_Frame& default_instance();

  static const Client_Frame* internal_default_instance();

  void Swap(Client_Frame* other);

  // implements Message ----------------------------------------------

  inline Client_Frame* New() const { return New(NULL); }

  Client_Frame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client_Frame& from);
  void MergeFrom(const Client_Frame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Client_Frame* other);
  void UnsafeMergeFrom(const Client_Frame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required int32 direction = 2;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CodeBattle.Client_Frame)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_direction();
  inline void clear_has_direction();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 direction_;
  friend void  protobuf_InitDefaults_msg_2eproto_impl();
  friend void  protobuf_AddDesc_msg_2eproto_impl();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Client_Frame> Client_Frame_default_instance_;

// -------------------------------------------------------------------

class Server_Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CodeBattle.Server_Frame) */ {
 public:
  Server_Frame();
  virtual ~Server_Frame();

  Server_Frame(const Server_Frame& from);

  inline Server_Frame& operator=(const Server_Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Server_Frame& default_instance();

  static const Server_Frame* internal_default_instance();

  void Swap(Server_Frame* other);

  // implements Message ----------------------------------------------

  inline Server_Frame* New() const { return New(NULL); }

  Server_Frame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server_Frame& from);
  void MergeFrom(const Server_Frame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Server_Frame* other);
  void UnsafeMergeFrom(const Server_Frame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool empty = 1;
  bool has_empty() const;
  void clear_empty();
  static const int kEmptyFieldNumber = 1;
  bool empty() const;
  void set_empty(bool value);

  // required int32 frameseq = 2;
  bool has_frameseq() const;
  void clear_frameseq();
  static const int kFrameseqFieldNumber = 2;
  ::google::protobuf::int32 frameseq() const;
  void set_frameseq(::google::protobuf::int32 value);

  // required .CodeBattle.Client_Frame preframe = 3;
  bool has_preframe() const;
  void clear_preframe();
  static const int kPreframeFieldNumber = 3;
  const ::CodeBattle::Client_Frame& preframe() const;
  ::CodeBattle::Client_Frame* mutable_preframe();
  ::CodeBattle::Client_Frame* release_preframe();
  void set_allocated_preframe(::CodeBattle::Client_Frame* preframe);

  // required .CodeBattle.Client_Frame laterframe = 4;
  bool has_laterframe() const;
  void clear_laterframe();
  static const int kLaterframeFieldNumber = 4;
  const ::CodeBattle::Client_Frame& laterframe() const;
  ::CodeBattle::Client_Frame* mutable_laterframe();
  ::CodeBattle::Client_Frame* release_laterframe();
  void set_allocated_laterframe(::CodeBattle::Client_Frame* laterframe);

  // @@protoc_insertion_point(class_scope:CodeBattle.Server_Frame)
 private:
  inline void set_has_empty();
  inline void clear_has_empty();
  inline void set_has_frameseq();
  inline void clear_has_frameseq();
  inline void set_has_preframe();
  inline void clear_has_preframe();
  inline void set_has_laterframe();
  inline void clear_has_laterframe();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CodeBattle::Client_Frame* preframe_;
  ::CodeBattle::Client_Frame* laterframe_;
  bool empty_;
  ::google::protobuf::int32 frameseq_;
  friend void  protobuf_InitDefaults_msg_2eproto_impl();
  friend void  protobuf_AddDesc_msg_2eproto_impl();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Server_Frame> Server_Frame_default_instance_;

// -------------------------------------------------------------------

class Login_Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CodeBattle.Login_Frame) */ {
 public:
  Login_Frame();
  virtual ~Login_Frame();

  Login_Frame(const Login_Frame& from);

  inline Login_Frame& operator=(const Login_Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_Frame& default_instance();

  static const Login_Frame* internal_default_instance();

  void Swap(Login_Frame* other);

  // implements Message ----------------------------------------------

  inline Login_Frame* New() const { return New(NULL); }

  Login_Frame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_Frame& from);
  void MergeFrom(const Login_Frame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Login_Frame* other);
  void UnsafeMergeFrom(const Login_Frame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool login = 1;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 1;
  bool login() const;
  void set_login(bool value);

  // required string username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:CodeBattle.Login_Frame)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  bool login_;
  friend void  protobuf_InitDefaults_msg_2eproto_impl();
  friend void  protobuf_AddDesc_msg_2eproto_impl();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Login_Frame> Login_Frame_default_instance_;

// -------------------------------------------------------------------

class Userinfo_Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CodeBattle.Userinfo_Frame) */ {
 public:
  Userinfo_Frame();
  virtual ~Userinfo_Frame();

  Userinfo_Frame(const Userinfo_Frame& from);

  inline Userinfo_Frame& operator=(const Userinfo_Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Userinfo_Frame& default_instance();

  static const Userinfo_Frame* internal_default_instance();

  void Swap(Userinfo_Frame* other);

  // implements Message ----------------------------------------------

  inline Userinfo_Frame* New() const { return New(NULL); }

  Userinfo_Frame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Userinfo_Frame& from);
  void MergeFrom(const Userinfo_Frame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Userinfo_Frame* other);
  void UnsafeMergeFrom(const Userinfo_Frame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required int32 winnumbers = 3;
  bool has_winnumbers() const;
  void clear_winnumbers();
  static const int kWinnumbersFieldNumber = 3;
  ::google::protobuf::int32 winnumbers() const;
  void set_winnumbers(::google::protobuf::int32 value);

  // required int32 losenumbers = 4;
  bool has_losenumbers() const;
  void clear_losenumbers();
  static const int kLosenumbersFieldNumber = 4;
  ::google::protobuf::int32 losenumbers() const;
  void set_losenumbers(::google::protobuf::int32 value);

  // required int32 winrate = 5;
  bool has_winrate() const;
  void clear_winrate();
  static const int kWinrateFieldNumber = 5;
  ::google::protobuf::int32 winrate() const;
  void set_winrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CodeBattle.Userinfo_Frame)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_winnumbers();
  inline void clear_has_winnumbers();
  inline void set_has_losenumbers();
  inline void clear_has_losenumbers();
  inline void set_has_winrate();
  inline void clear_has_winrate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 winnumbers_;
  ::google::protobuf::int32 losenumbers_;
  ::google::protobuf::int32 winrate_;
  friend void  protobuf_InitDefaults_msg_2eproto_impl();
  friend void  protobuf_AddDesc_msg_2eproto_impl();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Userinfo_Frame> Userinfo_Frame_default_instance_;

// -------------------------------------------------------------------

class Login_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CodeBattle.Login_Response) */ {
 public:
  Login_Response();
  virtual ~Login_Response();

  Login_Response(const Login_Response& from);

  inline Login_Response& operator=(const Login_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login_Response& default_instance();

  static const Login_Response* internal_default_instance();

  void Swap(Login_Response* other);

  // implements Message ----------------------------------------------

  inline Login_Response* New() const { return New(NULL); }

  Login_Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login_Response& from);
  void MergeFrom(const Login_Response& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Login_Response* other);
  void UnsafeMergeFrom(const Login_Response& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool succeed = 1;
  bool has_succeed() const;
  void clear_succeed();
  static const int kSucceedFieldNumber = 1;
  bool succeed() const;
  void set_succeed(bool value);

  // required int32 errcode = 2;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CodeBattle.Login_Response)
 private:
  inline void set_has_succeed();
  inline void clear_has_succeed();
  inline void set_has_errcode();
  inline void clear_has_errcode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool succeed_;
  ::google::protobuf::int32 errcode_;
  friend void  protobuf_InitDefaults_msg_2eproto_impl();
  friend void  protobuf_AddDesc_msg_2eproto_impl();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Login_Response> Login_Response_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Client_Frame

// required string ip = 1;
inline bool Client_Frame::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Client_Frame::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Client_Frame::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Client_Frame::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& Client_Frame::ip() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Client_Frame.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client_Frame::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CodeBattle.Client_Frame.ip)
}
inline void Client_Frame::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CodeBattle.Client_Frame.ip)
}
inline void Client_Frame::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CodeBattle.Client_Frame.ip)
}
inline ::std::string* Client_Frame::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:CodeBattle.Client_Frame.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Client_Frame::release_ip() {
  // @@protoc_insertion_point(field_release:CodeBattle.Client_Frame.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client_Frame::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Client_Frame.ip)
}

// required int32 direction = 2;
inline bool Client_Frame::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Client_Frame::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Client_Frame::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Client_Frame::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 Client_Frame::direction() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Client_Frame.direction)
  return direction_;
}
inline void Client_Frame::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Client_Frame.direction)
}

inline const Client_Frame* Client_Frame::internal_default_instance() {
  return &Client_Frame_default_instance_.get();
}
// -------------------------------------------------------------------

// Server_Frame

// required bool empty = 1;
inline bool Server_Frame::has_empty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Server_Frame::set_has_empty() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Server_Frame::clear_has_empty() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Server_Frame::clear_empty() {
  empty_ = false;
  clear_has_empty();
}
inline bool Server_Frame::empty() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Server_Frame.empty)
  return empty_;
}
inline void Server_Frame::set_empty(bool value) {
  set_has_empty();
  empty_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Server_Frame.empty)
}

// required int32 frameseq = 2;
inline bool Server_Frame::has_frameseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server_Frame::set_has_frameseq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server_Frame::clear_has_frameseq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server_Frame::clear_frameseq() {
  frameseq_ = 0;
  clear_has_frameseq();
}
inline ::google::protobuf::int32 Server_Frame::frameseq() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Server_Frame.frameseq)
  return frameseq_;
}
inline void Server_Frame::set_frameseq(::google::protobuf::int32 value) {
  set_has_frameseq();
  frameseq_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Server_Frame.frameseq)
}

// required .CodeBattle.Client_Frame preframe = 3;
inline bool Server_Frame::has_preframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Server_Frame::set_has_preframe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Server_Frame::clear_has_preframe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Server_Frame::clear_preframe() {
  if (preframe_ != NULL) preframe_->::CodeBattle::Client_Frame::Clear();
  clear_has_preframe();
}
inline const ::CodeBattle::Client_Frame& Server_Frame::preframe() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Server_Frame.preframe)
  return preframe_ != NULL ? *preframe_
                         : *::CodeBattle::Client_Frame::internal_default_instance();
}
inline ::CodeBattle::Client_Frame* Server_Frame::mutable_preframe() {
  set_has_preframe();
  if (preframe_ == NULL) {
    preframe_ = new ::CodeBattle::Client_Frame;
  }
  // @@protoc_insertion_point(field_mutable:CodeBattle.Server_Frame.preframe)
  return preframe_;
}
inline ::CodeBattle::Client_Frame* Server_Frame::release_preframe() {
  // @@protoc_insertion_point(field_release:CodeBattle.Server_Frame.preframe)
  clear_has_preframe();
  ::CodeBattle::Client_Frame* temp = preframe_;
  preframe_ = NULL;
  return temp;
}
inline void Server_Frame::set_allocated_preframe(::CodeBattle::Client_Frame* preframe) {
  delete preframe_;
  preframe_ = preframe;
  if (preframe) {
    set_has_preframe();
  } else {
    clear_has_preframe();
  }
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Server_Frame.preframe)
}

// required .CodeBattle.Client_Frame laterframe = 4;
inline bool Server_Frame::has_laterframe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Server_Frame::set_has_laterframe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Server_Frame::clear_has_laterframe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Server_Frame::clear_laterframe() {
  if (laterframe_ != NULL) laterframe_->::CodeBattle::Client_Frame::Clear();
  clear_has_laterframe();
}
inline const ::CodeBattle::Client_Frame& Server_Frame::laterframe() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Server_Frame.laterframe)
  return laterframe_ != NULL ? *laterframe_
                         : *::CodeBattle::Client_Frame::internal_default_instance();
}
inline ::CodeBattle::Client_Frame* Server_Frame::mutable_laterframe() {
  set_has_laterframe();
  if (laterframe_ == NULL) {
    laterframe_ = new ::CodeBattle::Client_Frame;
  }
  // @@protoc_insertion_point(field_mutable:CodeBattle.Server_Frame.laterframe)
  return laterframe_;
}
inline ::CodeBattle::Client_Frame* Server_Frame::release_laterframe() {
  // @@protoc_insertion_point(field_release:CodeBattle.Server_Frame.laterframe)
  clear_has_laterframe();
  ::CodeBattle::Client_Frame* temp = laterframe_;
  laterframe_ = NULL;
  return temp;
}
inline void Server_Frame::set_allocated_laterframe(::CodeBattle::Client_Frame* laterframe) {
  delete laterframe_;
  laterframe_ = laterframe;
  if (laterframe) {
    set_has_laterframe();
  } else {
    clear_has_laterframe();
  }
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Server_Frame.laterframe)
}

inline const Server_Frame* Server_Frame::internal_default_instance() {
  return &Server_Frame_default_instance_.get();
}
// -------------------------------------------------------------------

// Login_Frame

// required bool login = 1;
inline bool Login_Frame::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_Frame::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_Frame::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_Frame::clear_login() {
  login_ = false;
  clear_has_login();
}
inline bool Login_Frame::login() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Login_Frame.login)
  return login_;
}
inline void Login_Frame::set_login(bool value) {
  set_has_login();
  login_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Login_Frame.login)
}

// required string username = 2;
inline bool Login_Frame::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_Frame::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_Frame::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_Frame::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Login_Frame::username() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Login_Frame.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_Frame::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CodeBattle.Login_Frame.username)
}
inline void Login_Frame::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CodeBattle.Login_Frame.username)
}
inline void Login_Frame::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CodeBattle.Login_Frame.username)
}
inline ::std::string* Login_Frame::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:CodeBattle.Login_Frame.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_Frame::release_username() {
  // @@protoc_insertion_point(field_release:CodeBattle.Login_Frame.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_Frame::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Login_Frame.username)
}

// required string password = 3;
inline bool Login_Frame::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_Frame::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_Frame::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_Frame::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& Login_Frame::password() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Login_Frame.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_Frame::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CodeBattle.Login_Frame.password)
}
inline void Login_Frame::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CodeBattle.Login_Frame.password)
}
inline void Login_Frame::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CodeBattle.Login_Frame.password)
}
inline ::std::string* Login_Frame::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CodeBattle.Login_Frame.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login_Frame::release_password() {
  // @@protoc_insertion_point(field_release:CodeBattle.Login_Frame.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login_Frame::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Login_Frame.password)
}

inline const Login_Frame* Login_Frame::internal_default_instance() {
  return &Login_Frame_default_instance_.get();
}
// -------------------------------------------------------------------

// Userinfo_Frame

// required int32 id = 1;
inline bool Userinfo_Frame::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Userinfo_Frame::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Userinfo_Frame::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Userinfo_Frame::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Userinfo_Frame::id() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Userinfo_Frame.id)
  return id_;
}
inline void Userinfo_Frame::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Userinfo_Frame.id)
}

// required string username = 2;
inline bool Userinfo_Frame::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Userinfo_Frame::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Userinfo_Frame::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Userinfo_Frame::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Userinfo_Frame::username() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Userinfo_Frame.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Userinfo_Frame::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CodeBattle.Userinfo_Frame.username)
}
inline void Userinfo_Frame::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CodeBattle.Userinfo_Frame.username)
}
inline void Userinfo_Frame::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CodeBattle.Userinfo_Frame.username)
}
inline ::std::string* Userinfo_Frame::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:CodeBattle.Userinfo_Frame.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Userinfo_Frame::release_username() {
  // @@protoc_insertion_point(field_release:CodeBattle.Userinfo_Frame.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Userinfo_Frame::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Userinfo_Frame.username)
}

// required int32 winnumbers = 3;
inline bool Userinfo_Frame::has_winnumbers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Userinfo_Frame::set_has_winnumbers() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Userinfo_Frame::clear_has_winnumbers() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Userinfo_Frame::clear_winnumbers() {
  winnumbers_ = 0;
  clear_has_winnumbers();
}
inline ::google::protobuf::int32 Userinfo_Frame::winnumbers() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Userinfo_Frame.winnumbers)
  return winnumbers_;
}
inline void Userinfo_Frame::set_winnumbers(::google::protobuf::int32 value) {
  set_has_winnumbers();
  winnumbers_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Userinfo_Frame.winnumbers)
}

// required int32 losenumbers = 4;
inline bool Userinfo_Frame::has_losenumbers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Userinfo_Frame::set_has_losenumbers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Userinfo_Frame::clear_has_losenumbers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Userinfo_Frame::clear_losenumbers() {
  losenumbers_ = 0;
  clear_has_losenumbers();
}
inline ::google::protobuf::int32 Userinfo_Frame::losenumbers() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Userinfo_Frame.losenumbers)
  return losenumbers_;
}
inline void Userinfo_Frame::set_losenumbers(::google::protobuf::int32 value) {
  set_has_losenumbers();
  losenumbers_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Userinfo_Frame.losenumbers)
}

// required int32 winrate = 5;
inline bool Userinfo_Frame::has_winrate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Userinfo_Frame::set_has_winrate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Userinfo_Frame::clear_has_winrate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Userinfo_Frame::clear_winrate() {
  winrate_ = 0;
  clear_has_winrate();
}
inline ::google::protobuf::int32 Userinfo_Frame::winrate() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Userinfo_Frame.winrate)
  return winrate_;
}
inline void Userinfo_Frame::set_winrate(::google::protobuf::int32 value) {
  set_has_winrate();
  winrate_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Userinfo_Frame.winrate)
}

inline const Userinfo_Frame* Userinfo_Frame::internal_default_instance() {
  return &Userinfo_Frame_default_instance_.get();
}
// -------------------------------------------------------------------

// Login_Response

// required bool succeed = 1;
inline bool Login_Response::has_succeed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_Response::set_has_succeed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_Response::clear_has_succeed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_Response::clear_succeed() {
  succeed_ = false;
  clear_has_succeed();
}
inline bool Login_Response::succeed() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Login_Response.succeed)
  return succeed_;
}
inline void Login_Response::set_succeed(bool value) {
  set_has_succeed();
  succeed_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Login_Response.succeed)
}

// required int32 errcode = 2;
inline bool Login_Response::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_Response::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_Response::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_Response::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 Login_Response::errcode() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Login_Response.errcode)
  return errcode_;
}
inline void Login_Response::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Login_Response.errcode)
}

inline const Login_Response* Login_Response::internal_default_instance() {
  return &Login_Response_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CodeBattle

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
