// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CodeBattle {

namespace {

const ::google::protobuf::Descriptor* Client_Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Client_Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Server_Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_Frame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  Client_Frame_descriptor_ = file->message_type(0);
  static const int Client_Frame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_Frame, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_Frame, direction_),
  };
  Client_Frame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Client_Frame_descriptor_,
      Client_Frame::internal_default_instance(),
      Client_Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_Frame, _has_bits_),
      -1,
      -1,
      sizeof(Client_Frame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Client_Frame, _internal_metadata_));
  Server_Frame_descriptor_ = file->message_type(1);
  static const int Server_Frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Frame, empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Frame, frameseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Frame, preframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Frame, laterframe_),
  };
  Server_Frame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Server_Frame_descriptor_,
      Server_Frame::internal_default_instance(),
      Server_Frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Frame, _has_bits_),
      -1,
      -1,
      sizeof(Server_Frame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server_Frame, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Client_Frame_descriptor_, Client_Frame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Server_Frame_descriptor_, Server_Frame::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  Client_Frame_default_instance_.Shutdown();
  delete Client_Frame_reflection_;
  Server_Frame_default_instance_.Shutdown();
  delete Server_Frame_reflection_;
}

void protobuf_InitDefaults_msg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Client_Frame_default_instance_.DefaultConstruct();
  Server_Frame_default_instance_.DefaultConstruct();
  Client_Frame_default_instance_.get_mutable()->InitAsDefaultInstance();
  Server_Frame_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_msg_2eproto_once_);
void protobuf_InitDefaults_msg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_msg_2eproto_once_,
                 &protobuf_InitDefaults_msg_2eproto_impl);
}
void protobuf_AddDesc_msg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_msg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\nCodeBattle\"-\n\014Client_Frame\022"
    "\n\n\002ip\030\001 \002(\t\022\021\n\tdirection\030\002 \002(\005\"\211\001\n\014Serve"
    "r_Frame\022\r\n\005empty\030\001 \002(\010\022\020\n\010frameseq\030\002 \002(\005"
    "\022*\n\010preframe\030\003 \002(\0132\030.CodeBattle.Client_F"
    "rame\022,\n\nlaterframe\030\004 \002(\0132\030.CodeBattle.Cl"
    "ient_Frame", 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_msg_2eproto_once_);
void protobuf_AddDesc_msg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_msg_2eproto_once_,
                 &protobuf_AddDesc_msg_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Client_Frame::kIpFieldNumber;
const int Client_Frame::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Client_Frame::Client_Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CodeBattle.Client_Frame)
}

void Client_Frame::InitAsDefaultInstance() {
}

Client_Frame::Client_Frame(const Client_Frame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CodeBattle.Client_Frame)
}

void Client_Frame::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
}

Client_Frame::~Client_Frame() {
  // @@protoc_insertion_point(destructor:CodeBattle.Client_Frame)
  SharedDtor();
}

void Client_Frame::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Client_Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Client_Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Client_Frame_descriptor_;
}

const Client_Frame& Client_Frame::default_instance() {
  protobuf_InitDefaults_msg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Client_Frame> Client_Frame_default_instance_;

Client_Frame* Client_Frame::New(::google::protobuf::Arena* arena) const {
  Client_Frame* n = new Client_Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Client_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:CodeBattle.Client_Frame)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    direction_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Client_Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CodeBattle.Client_Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CodeBattle.Client_Frame.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_direction;
        break;
      }

      // required int32 direction = 2;
      case 2: {
        if (tag == 16) {
         parse_direction:
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CodeBattle.Client_Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CodeBattle.Client_Frame)
  return false;
#undef DO_
}

void Client_Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CodeBattle.Client_Frame)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CodeBattle.Client_Frame.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required int32 direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CodeBattle.Client_Frame)
}

::google::protobuf::uint8* Client_Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CodeBattle.Client_Frame)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CodeBattle.Client_Frame.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CodeBattle.Client_Frame)
  return target;
}

size_t Client_Frame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CodeBattle.Client_Frame)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_direction()) {
    // required int32 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  return total_size;
}
size_t Client_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CodeBattle.Client_Frame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required int32 direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Client_Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CodeBattle.Client_Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Client_Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Client_Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CodeBattle.Client_Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CodeBattle.Client_Frame)
    UnsafeMergeFrom(*source);
  }
}

void Client_Frame::MergeFrom(const Client_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CodeBattle.Client_Frame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Client_Frame::UnsafeMergeFrom(const Client_Frame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Client_Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CodeBattle.Client_Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Client_Frame::CopyFrom(const Client_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CodeBattle.Client_Frame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Client_Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Client_Frame::Swap(Client_Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Client_Frame::InternalSwap(Client_Frame* other) {
  ip_.Swap(&other->ip_);
  std::swap(direction_, other->direction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Client_Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Client_Frame_descriptor_;
  metadata.reflection = Client_Frame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Client_Frame

// required string ip = 1;
bool Client_Frame::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Client_Frame::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void Client_Frame::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void Client_Frame::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& Client_Frame::ip() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Client_Frame.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Client_Frame::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CodeBattle.Client_Frame.ip)
}
void Client_Frame::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CodeBattle.Client_Frame.ip)
}
void Client_Frame::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CodeBattle.Client_Frame.ip)
}
::std::string* Client_Frame::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:CodeBattle.Client_Frame.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Client_Frame::release_ip() {
  // @@protoc_insertion_point(field_release:CodeBattle.Client_Frame.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Client_Frame::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Client_Frame.ip)
}

// required int32 direction = 2;
bool Client_Frame::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Client_Frame::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void Client_Frame::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void Client_Frame::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
::google::protobuf::int32 Client_Frame::direction() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Client_Frame.direction)
  return direction_;
}
void Client_Frame::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Client_Frame.direction)
}

inline const Client_Frame* Client_Frame::internal_default_instance() {
  return &Client_Frame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server_Frame::kEmptyFieldNumber;
const int Server_Frame::kFrameseqFieldNumber;
const int Server_Frame::kPreframeFieldNumber;
const int Server_Frame::kLaterframeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server_Frame::Server_Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_msg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CodeBattle.Server_Frame)
}

void Server_Frame::InitAsDefaultInstance() {
  preframe_ = const_cast< ::CodeBattle::Client_Frame*>(
      ::CodeBattle::Client_Frame::internal_default_instance());
  laterframe_ = const_cast< ::CodeBattle::Client_Frame*>(
      ::CodeBattle::Client_Frame::internal_default_instance());
}

Server_Frame::Server_Frame(const Server_Frame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CodeBattle.Server_Frame)
}

void Server_Frame::SharedCtor() {
  _cached_size_ = 0;
  preframe_ = NULL;
  laterframe_ = NULL;
  ::memset(&empty_, 0, reinterpret_cast<char*>(&frameseq_) -
    reinterpret_cast<char*>(&empty_) + sizeof(frameseq_));
}

Server_Frame::~Server_Frame() {
  // @@protoc_insertion_point(destructor:CodeBattle.Server_Frame)
  SharedDtor();
}

void Server_Frame::SharedDtor() {
  if (this != &Server_Frame_default_instance_.get()) {
    delete preframe_;
    delete laterframe_;
  }
}

void Server_Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server_Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_Frame_descriptor_;
}

const Server_Frame& Server_Frame::default_instance() {
  protobuf_InitDefaults_msg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Server_Frame> Server_Frame_default_instance_;

Server_Frame* Server_Frame::New(::google::protobuf::Arena* arena) const {
  Server_Frame* n = new Server_Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Server_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:CodeBattle.Server_Frame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Server_Frame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Server_Frame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(empty_, frameseq_);
    if (has_preframe()) {
      if (preframe_ != NULL) preframe_->::CodeBattle::Client_Frame::Clear();
    }
    if (has_laterframe()) {
      if (laterframe_ != NULL) laterframe_->::CodeBattle::Client_Frame::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Server_Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CodeBattle.Server_Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool empty = 1;
      case 1: {
        if (tag == 8) {
          set_has_empty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frameseq;
        break;
      }

      // required int32 frameseq = 2;
      case 2: {
        if (tag == 16) {
         parse_frameseq:
          set_has_frameseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameseq_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_preframe;
        break;
      }

      // required .CodeBattle.Client_Frame preframe = 3;
      case 3: {
        if (tag == 26) {
         parse_preframe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preframe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_laterframe;
        break;
      }

      // required .CodeBattle.Client_Frame laterframe = 4;
      case 4: {
        if (tag == 34) {
         parse_laterframe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laterframe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CodeBattle.Server_Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CodeBattle.Server_Frame)
  return false;
#undef DO_
}

void Server_Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CodeBattle.Server_Frame)
  // required bool empty = 1;
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->empty(), output);
  }

  // required int32 frameseq = 2;
  if (has_frameseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frameseq(), output);
  }

  // required .CodeBattle.Client_Frame preframe = 3;
  if (has_preframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->preframe_, output);
  }

  // required .CodeBattle.Client_Frame laterframe = 4;
  if (has_laterframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->laterframe_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CodeBattle.Server_Frame)
}

::google::protobuf::uint8* Server_Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CodeBattle.Server_Frame)
  // required bool empty = 1;
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->empty(), target);
  }

  // required int32 frameseq = 2;
  if (has_frameseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frameseq(), target);
  }

  // required .CodeBattle.Client_Frame preframe = 3;
  if (has_preframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->preframe_, false, target);
  }

  // required .CodeBattle.Client_Frame laterframe = 4;
  if (has_laterframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->laterframe_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CodeBattle.Server_Frame)
  return target;
}

size_t Server_Frame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CodeBattle.Server_Frame)
  size_t total_size = 0;

  if (has_empty()) {
    // required bool empty = 1;
    total_size += 1 + 1;
  }

  if (has_frameseq()) {
    // required int32 frameseq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frameseq());
  }

  if (has_preframe()) {
    // required .CodeBattle.Client_Frame preframe = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preframe_);
  }

  if (has_laterframe()) {
    // required .CodeBattle.Client_Frame laterframe = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->laterframe_);
  }

  return total_size;
}
size_t Server_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CodeBattle.Server_Frame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool empty = 1;
    total_size += 1 + 1;

    // required int32 frameseq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frameseq());

    // required .CodeBattle.Client_Frame preframe = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preframe_);

    // required .CodeBattle.Client_Frame laterframe = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->laterframe_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server_Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CodeBattle.Server_Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Server_Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server_Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CodeBattle.Server_Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CodeBattle.Server_Frame)
    UnsafeMergeFrom(*source);
  }
}

void Server_Frame::MergeFrom(const Server_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CodeBattle.Server_Frame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Server_Frame::UnsafeMergeFrom(const Server_Frame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empty()) {
      set_empty(from.empty());
    }
    if (from.has_frameseq()) {
      set_frameseq(from.frameseq());
    }
    if (from.has_preframe()) {
      mutable_preframe()->::CodeBattle::Client_Frame::MergeFrom(from.preframe());
    }
    if (from.has_laterframe()) {
      mutable_laterframe()->::CodeBattle::Client_Frame::MergeFrom(from.laterframe());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Server_Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CodeBattle.Server_Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server_Frame::CopyFrom(const Server_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CodeBattle.Server_Frame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Server_Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_preframe()) {
    if (!this->preframe_->IsInitialized()) return false;
  }
  if (has_laterframe()) {
    if (!this->laterframe_->IsInitialized()) return false;
  }
  return true;
}

void Server_Frame::Swap(Server_Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server_Frame::InternalSwap(Server_Frame* other) {
  std::swap(empty_, other->empty_);
  std::swap(frameseq_, other->frameseq_);
  std::swap(preframe_, other->preframe_);
  std::swap(laterframe_, other->laterframe_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Server_Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_Frame_descriptor_;
  metadata.reflection = Server_Frame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Server_Frame

// required bool empty = 1;
bool Server_Frame::has_empty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Server_Frame::set_has_empty() {
  _has_bits_[0] |= 0x00000001u;
}
void Server_Frame::clear_has_empty() {
  _has_bits_[0] &= ~0x00000001u;
}
void Server_Frame::clear_empty() {
  empty_ = false;
  clear_has_empty();
}
bool Server_Frame::empty() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Server_Frame.empty)
  return empty_;
}
void Server_Frame::set_empty(bool value) {
  set_has_empty();
  empty_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Server_Frame.empty)
}

// required int32 frameseq = 2;
bool Server_Frame::has_frameseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Server_Frame::set_has_frameseq() {
  _has_bits_[0] |= 0x00000002u;
}
void Server_Frame::clear_has_frameseq() {
  _has_bits_[0] &= ~0x00000002u;
}
void Server_Frame::clear_frameseq() {
  frameseq_ = 0;
  clear_has_frameseq();
}
::google::protobuf::int32 Server_Frame::frameseq() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Server_Frame.frameseq)
  return frameseq_;
}
void Server_Frame::set_frameseq(::google::protobuf::int32 value) {
  set_has_frameseq();
  frameseq_ = value;
  // @@protoc_insertion_point(field_set:CodeBattle.Server_Frame.frameseq)
}

// required .CodeBattle.Client_Frame preframe = 3;
bool Server_Frame::has_preframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Server_Frame::set_has_preframe() {
  _has_bits_[0] |= 0x00000004u;
}
void Server_Frame::clear_has_preframe() {
  _has_bits_[0] &= ~0x00000004u;
}
void Server_Frame::clear_preframe() {
  if (preframe_ != NULL) preframe_->::CodeBattle::Client_Frame::Clear();
  clear_has_preframe();
}
const ::CodeBattle::Client_Frame& Server_Frame::preframe() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Server_Frame.preframe)
  return preframe_ != NULL ? *preframe_
                         : *::CodeBattle::Client_Frame::internal_default_instance();
}
::CodeBattle::Client_Frame* Server_Frame::mutable_preframe() {
  set_has_preframe();
  if (preframe_ == NULL) {
    preframe_ = new ::CodeBattle::Client_Frame;
  }
  // @@protoc_insertion_point(field_mutable:CodeBattle.Server_Frame.preframe)
  return preframe_;
}
::CodeBattle::Client_Frame* Server_Frame::release_preframe() {
  // @@protoc_insertion_point(field_release:CodeBattle.Server_Frame.preframe)
  clear_has_preframe();
  ::CodeBattle::Client_Frame* temp = preframe_;
  preframe_ = NULL;
  return temp;
}
void Server_Frame::set_allocated_preframe(::CodeBattle::Client_Frame* preframe) {
  delete preframe_;
  preframe_ = preframe;
  if (preframe) {
    set_has_preframe();
  } else {
    clear_has_preframe();
  }
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Server_Frame.preframe)
}

// required .CodeBattle.Client_Frame laterframe = 4;
bool Server_Frame::has_laterframe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Server_Frame::set_has_laterframe() {
  _has_bits_[0] |= 0x00000008u;
}
void Server_Frame::clear_has_laterframe() {
  _has_bits_[0] &= ~0x00000008u;
}
void Server_Frame::clear_laterframe() {
  if (laterframe_ != NULL) laterframe_->::CodeBattle::Client_Frame::Clear();
  clear_has_laterframe();
}
const ::CodeBattle::Client_Frame& Server_Frame::laterframe() const {
  // @@protoc_insertion_point(field_get:CodeBattle.Server_Frame.laterframe)
  return laterframe_ != NULL ? *laterframe_
                         : *::CodeBattle::Client_Frame::internal_default_instance();
}
::CodeBattle::Client_Frame* Server_Frame::mutable_laterframe() {
  set_has_laterframe();
  if (laterframe_ == NULL) {
    laterframe_ = new ::CodeBattle::Client_Frame;
  }
  // @@protoc_insertion_point(field_mutable:CodeBattle.Server_Frame.laterframe)
  return laterframe_;
}
::CodeBattle::Client_Frame* Server_Frame::release_laterframe() {
  // @@protoc_insertion_point(field_release:CodeBattle.Server_Frame.laterframe)
  clear_has_laterframe();
  ::CodeBattle::Client_Frame* temp = laterframe_;
  laterframe_ = NULL;
  return temp;
}
void Server_Frame::set_allocated_laterframe(::CodeBattle::Client_Frame* laterframe) {
  delete laterframe_;
  laterframe_ = laterframe;
  if (laterframe) {
    set_has_laterframe();
  } else {
    clear_has_laterframe();
  }
  // @@protoc_insertion_point(field_set_allocated:CodeBattle.Server_Frame.laterframe)
}

inline const Server_Frame* Server_Frame::internal_default_instance() {
  return &Server_Frame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CodeBattle

// @@protoc_insertion_point(global_scope)
